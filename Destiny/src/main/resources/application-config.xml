<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:mongo="http://www.springframework.org/schema/data/mongo" xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:p="http://www.springframework.org/schema/p" xmlns:rabbit="http://www.springframework.org/schema/rabbit" xmlns:mybatis="http://mybatis.org/schema/mybatis-spring" xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx    http://www.springframework.org/schema/tx/spring-tx.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
        http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo-1.5.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd 
        http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit-1.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
        http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:mysql.properties</value>
            </list>
        </property> 
    </bean>
    
    <!-- 정보 데이터소스 -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${info.driverClassName}" />
        <property name="url" value="${info.url}" />
        <property name="username" value="${info.username}" />
        <property name="password" value="${info.password}" />
        <property name="maxActive" value="10" />
        <property name="maxWait" value="6000" />
        <property name="poolPreparedStatements" value="true" />
        <property name="defaultAutoCommit" value="true" />
        <property name="initialSize" value="5" />
        <property name="maxIdle" value="5" />
        <property name="validationQuery" value="select 1" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="true" />
    </bean>

    <!-- 정보 트랜잭션 관리자 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- log 마이바티스 설정 // -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="typeAliasesPackage" value="my.random.bean" />
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <property name="mapperLocations">
            <array>
                <value>classpath:my/random/example/*.xml</value>
            </array>
        </property>
    </bean>

    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="my.random.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean" />
    </bean>
    
    <!-- 인스타 마이바티스 설정  -->
	<bean id="instaSqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="typeAliasesPackage" value="my.instagram.bean" />
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="mapperLocations">
			<array>
				<value>classpath:my/instagram/example/*.xml</value>
			</array>
		</property>
	</bean>
	<bean id="noticeMapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="my.instagram.mapper" />
		<property name="sqlSessionFactoryBeanName" value="instaSqlSessionFactoryBean" />
	</bean>
    
    <tx:annotation-driven transaction-manager="transactionManager" />
    <!-- 쿼츠 -->
    <bean id="manageService" class="my.random.service.ManageServiceImpl" />
    <bean id="destinyService" class="my.random.service.DestinyServiceImpl" />
    <bean id="quartzShedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="schedulerContextAsMap">
            <map>
                <entry key="manageService" value-ref="manageService" />
                <entry key="destinyService" value-ref="destinyService" />
            </map>
        </property>

        <property name="triggers">
            <list>
                <ref bean="quartzCronTriggerWeekly" />
            </list>
        </property>

        <!-- Quartz 실행시 세팅 -->
        <property name="quartzProperties">
            <props>
                <prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</prop>
                <prop key="org.quartz.threadPool.threadCount">5</prop>
                <prop key="org.quartz.threadPool.threadPriority">4</prop>
                <prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</prop>
                <prop key="org.quartz.jobStore.misfireThreshold">60000</prop>
            </props>
        </property>
    </bean>

    <!-- Triggers -->
    <bean name="quartzCronTriggerWeekly" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail" ref="quartzJobWeekly" />
        <!-- 매주 토요일 20시, 21시 5분간격으로 20초에 동작 -->
        <property name="cronExpression" value="20 0/5 21-23 ? * SAT" />
        
        <!-- 매 1분마다 실행 -->
        <!-- <property name="cronExpression" value="0 0/1 * * * ?" /> -->
    </bean>
    
    <bean name="quartzJobWeekly" class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
        <property name="jobClass" value="my.random.api.scheduler.CronQuartzWeekly" />
        <property name="durability" value="true" />
    </bean>
    
   
</beans>
